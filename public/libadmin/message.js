// Generated by CoffeeScript 1.8.0
(function() {
  var Message;

  Message = (function() {
    function Message() {}

    Message.timeline = function(token, callback, from, to, pageIndex, pageCount) {
      if (to == null) {
        to = '';
      }
      if (pageIndex == null) {
        pageIndex = 0;
      }
      if (pageCount == null) {
        pageCount = 50;
      }
      return Util._get('../admin/chat/timeline', {
        from: from,
        to: to,
        page_index: pageIndex,
        page_count: pageCount,
        access_token: token
      }, function(resp) {
        var messages, msg, _i, _len, _ref;
        if (Error._hasError(resp)) {
          return callback(new Error(resp.error_id, resp.error_desc));
        } else {
          messages = [];
          _ref = resp.messages;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            msg = _ref[_i];
            messages.push(new Message()._update(msg));
          }
          return callback(messages, resp.page_index, resp.page_total, resp.total_number);
        }
      });
    };

    Message.prototype.send = function(token, callback) {
      return Util._post('../admin/chat/send', {
        from: this.from,
        to: this.to,
        contents: this.contents,
        time: this.time,
        access_token: token
      }, function(resp) {
        if (Error._hasError(resp)) {
          return callback(new Error(resp.error_id, resp.error_desc));
        } else {
          return callback(resp);
        }
      });
    };

    Message.prototype["delete"] = function(token, callback) {
      return Util._post('../admin/chat/delete', {
        message_id: this.message_id,
        access_token: token
      }, function(resp) {
        if (Error._hasError(resp)) {
          return callback(new Error(resp.error_id, resp.error_desc));
        } else {
          return callback(resp);
        }
      });
    };

    Message.prototype._update = function(data) {
      this.message_id = data.message_id;
      this.from = data.from;
      this.to = data.to;
      this.time = Util._formatDate(new Date(data.time * 1000));
      this.contents = data.contents;
      return this;
    };

    return Message;

  })();

}).call(this);

//# sourceMappingURL=message.js.map
