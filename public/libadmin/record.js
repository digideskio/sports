// Generated by CoffeeScript 1.8.0
(function() {
  var Record;

  Record = (function() {
    function Record() {}

    Record.timeline = function(token, userid, type, callback, pageIndex, pageCount) {
      if (pageIndex == null) {
        pageIndex = 0;
      }
      if (pageCount == null) {
        pageCount = 50;
      }
      return Util._get('../admin/record/timeline', {
        userid: userid,
        type: type,
        page_index: pageIndex,
        page_count: pageCount,
        access_token: token
      }, function(resp) {
        var rec, records, _i, _len, _ref;
        if (Error._hasError(resp)) {
          return callback(new Error(resp.error_id, resp.error_desc));
        } else {
          records = [];
          _ref = resp.records;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            rec = _ref[_i];
            records.push(new Record()._update(rec));
          }
          return callback(records, resp.page_index, resp.page_total, resp.total_number);
        }
      });
    };

    Record.prototype["delete"] = function(token, userid, type, callback) {
      return Util._post('../admin/record/delete', {
        userid: userid,
        type: type
      }, function(resp) {
        if (Error._hasError(resp)) {
          return callback(new Error(resp.error_id, resp.error_desc));
        } else {
          return callback(resp);
        }
      });
    };

    Record.prototype._update = function(data) {
      this.record_id = data.record_id;
      this.type = data.type;
      this.duration = data.duration;
      this.distance = data.distance;
      this.iamges = data.iamges;
      this.game_name = data.game_name;
      this.game_score = data.game_score;
      this.time = Util._formatDate(new Date(data.time * 1000));
      this.pub_time = Util._formatDate(new Date(data.pub_time * 1000));
      return this;
    };

    return Record;

  })();

}).call(this);

//# sourceMappingURL=record.js.map
